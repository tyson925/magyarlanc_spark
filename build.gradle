group 'hu.u-szeged'
version '1.0-SNAPSHOT'
description 'magyarlanc on spark'

buildscript {
    ext.kotlin_version = '1.0.5'
    repositories {
        maven {
            url "https://collokia.artifactoryonline.com/collokia/collokia-internal"
            credentials {
                username "${collokiaRepoUser}"
                password "${collokiaRepoPass}"
            }
        }

        jcenter()
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-eap'
        }
        maven {
            url 'http://dl.bintray.com/jaysonminard/kohesive'
        }
        maven {
            url "https://jitpack.io"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    jcenter()

    maven {
        url "https://collokia.artifactoryonline.com/collokia/collokia-internal"
        credentials {
            username "${collokiaRepoUser}"
            password "${collokiaRepoPass}"
        }
    }
    maven {
        url 'https://collokia.artifactoryonline.com/collokia/collokia-oss'
    }

    maven {
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url 'http://repo.spring.io/plugins-release'
    }
    maven {
        url 'http://dl.bintray.com/kotlin/kotlin-eap'
    }
    maven {
        url 'http://dl.bintray.com/jaysonminard/kohesive'
    }
    maven {
        url "https://jitpack.io"
    }

}

// In this section you declare the dependencies for your production and test code
dependencies {

    compile 'com.github.zsibritajanos:magyarlanc:master-SNAPSHOT'

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "org.apache.spark:spark-mllib_${scalaVersion}:${version_Spark}"
    compile "org.apache.spark:spark-sql_${scalaVersion}:${version_Spark}"
    compile "org.apache.spark:spark-core_${scalaVersion}:${version_Spark}"
    compile "org.apache.spark:spark-streaming_${scalaVersion}:${version_Spark}"
    compile "org.elasticsearch:elasticsearch:$versionElasticSearch"
    compile "org.elasticsearch.client:transport:$versionElasticSearchMR"
    // https://mvnrepository.com/artifact/io.netty/netty-all
    compile group: 'io.netty', name: 'netty-all', version: '4.1.3.Final'

    compile "org.jsoup:jsoup:${version_jsoup}"

    compile "com.amazonaws:aws-java-sdk-s3:$version_aws_client"

    compile "org.elasticsearch:elasticsearch-spark-20_${scalaVersion}:$versionElasticSearchMR"


    compile "joda-time:joda-time:$version_jodatime"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$version_jackson"
    compile "com.fasterxml.jackson.core:jackson-core:$version_jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$version_jackson"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$version_jackson_kotlin"
    compile "com.fasterxml.jackson.module:jackson-module-scala_${scalaVersion}:$version_jackson_scala"

    compile 'org.apache.commons:commons-compress:1.10'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}